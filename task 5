import numpy as np
from numpy import inf
d = np.array([[0,10,12,11,14],
              [11,0,13,15,8],
              [10,13,0,9,14],
              [11,15,9,0,16],
              [14,8,14,16,0]])
iteration = 100
n_ants = 5
n_citys = 5
e = 0.5       
alpha = 1     
beta = 2     
visibility = 1 / d
visibility[visibility == inf] = 0
pheromone = 0.1 * np.ones((n_citys, n_citys))
rute = np.ones((n_ants, n_citys + 1))

for ite in range(iteration):
    rute[:, 0] = 1 

    for i in range(n_ants):
        visited = set([1])
        for j in range(1, n_citys):
            cur_loc = int(rute[i, j - 1]) - 1
            prob = np.zeros(n_citys)

            for k in range(n_citys):
                if (k + 1) not in visited:
                    prob[k] = (pheromone[cur_loc, k] ** alpha) * (visibility[cur_loc, k] ** beta)

            prob_sum = np.sum(prob)
            if prob_sum == 0:
                next_city = list(set(range(1, n_citys + 1)) - visited)[0]
            else:
                prob = prob / prob_sum
                cum_prob = np.cumsum(prob)
                r = np.random.random()
                next_city = np.where(cum_prob >= r)[0][0] + 1

            rute[i, j] = next_city
            visited.add(next_city)
        rute[i, -1] = 1
    dist_cost = np.zeros(n_ants)
    for i in range(n_ants):
        s = 0
        for j in range(n_citys):
            s += d[int(rute[i, j]) - 1, int(rute[i, j + 1]) - 1]
        dist_cost[i] = s
    dist_min_loc = np.argmin(dist_cost)
    dist_min_cost = dist_cost[dist_min_loc]
    best_route = rute[dist_min_loc, :]
    pheromone *= (1 - e)
    for i in range(n_ants):
        for j in range(n_citys):
            from_city = int(rute[i, j]) - 1
            to_city = int(rute[i, j + 1]) - 1
            pheromone[from_city, to_city] += 1.0 / dist_cost[i]
print('Route of all the ants at the end:')
print(rute)
print()
print('Best path:', best_route)
print('Cost of the best path:', int(dist_min_cost))
